
> cs-app@0.1.0 dev
> WRANGLER_STATE_PATH=../../.wrangler/state next dev

  â–² Next.js 14.2.23
  - Local:        http://localhost:3000
  - Environments: .env.local

 âœ“ Starting...
Using vars defined in .dev.vars
 âœ“ Ready in 2.6s
 â—‹ Compiling /auth/login ...
 âœ“ Compiled /auth/login in 5.3s (1482 modules)
////////////////////////////
after hook path /get-session
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:3000',
      'http://localhost:8787'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: null
  },
  _flag: undefined,
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/get-session',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  body: undefined,
  query: undefined
}
////////////////////////////
 GET /auth/login 200 in 6098ms
 âœ“ Compiled in 760ms (394 modules)
 â—‹ Compiling /favicon.ico ...
 âœ“ Compiled /favicon.ico in 919ms (1119 modules)
 GET /favicon.ico 200 in 1024ms
 â—‹ Compiling /auth/signup ...
 âœ“ Compiled /auth/signup in 603ms (1508 modules)
////////////////////////////
after hook path /get-session
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:3000',
      'http://localhost:8787'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: null
  },
  _flag: undefined,
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/get-session',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  body: undefined,
  query: undefined
}
////////////////////////////
 GET /auth/signup?_rsc=a80u9 200 in 145ms
 âœ“ Compiled /api/auth/[...all] in 263ms (1128 modules)
ðŸ“¨ Email sent to: jmy52917@kisoq.com with template: email-verification and props: {
  verificationUrl: 'http://localhost:3000/api/auth/verify-email?token=eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImpteTUyOTE3QGtpc29xLmNvbSIsImlhdCI6MTc0MDgzNjg2NCwiZXhwIjoxNzQwODQwNDY0fQ.PUXNt2MGsqkOpGzhMgKswqG13JSaNeo77TPe3XFpLi4&callbackURL=/chat',
  username: 'jmy52917@kisoq.com'
}
////////////////////////////
after hook path /sign-up/email
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:8787',
      'http://localhost:3000/api/auth',
      'http://localhost:3000'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: _Response [Response] {
      [Symbol(realm)]: [Object],
      [Symbol(state)]: [Object],
      [Symbol(headers)]: [_HeadersList]
    }
  },
  _flag: 'router',
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/sign-up/email',
  method: 'POST',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(22) {
      'accept' => [Object],
      'accept-encoding' => [Object],
      'accept-language' => [Object],
      'connection' => [Object],
      'content-length' => [Object],
      'content-type' => [Object],
      'cookie' => [Object],
      'host' => [Object],
      'origin' => [Object],
      'referer' => [Object],
      'sec-ch-ua' => [Object],
      'sec-ch-ua-mobile' => [Object],
      'sec-ch-ua-platform' => [Object],
      'sec-fetch-dest' => [Object],
      'sec-fetch-mode' => [Object],
      'sec-fetch-site' => [Object],
      'sec-gpc' => [Object],
      'user-agent' => [Object],
      'x-forwarded-for' => [Object],
      'x-forwarded-host' => [Object],
      'x-forwarded-port' => [Object],
      'x-forwarded-proto' => [Object]
    },
    [Symbol(headers map sorted)]: [
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array]
    ]
  },
  params: undefined,
  request: NextRequest [Request] {
    [Symbol(realm)]: { settingsObject: [Object] },
    [Symbol(state)]: {
      method: 'POST',
      localURLsOnly: false,
      unsafeRequest: false,
      body: [Object],
      client: [Object],
      reservedClient: null,
      replacesClientId: '',
      window: 'client',
      keepalive: false,
      serviceWorkers: 'all',
      initiator: '',
      destination: '',
      priority: null,
      origin: 'client',
      policyContainer: 'client',
      referrer: 'client',
      referrerPolicy: '',
      mode: 'cors',
      useCORSPreflightFlag: true,
      credentials: 'same-origin',
      useCredentials: false,
      cache: 'default',
      redirect: 'follow',
      integrity: '',
      cryptoGraphicsNonceMetadata: '',
      parserMetadata: '',
      reloadNavigation: false,
      historyNavigation: false,
      userActivation: false,
      taintedOrigin: false,
      redirectCount: 0,
      responseTainting: 'basic',
      preventNoCacheCacheControlHeaderModification: false,
      done: false,
      timingAllowFailed: false,
      headersList: [_HeadersList],
      urlList: [Array],
      url: URL {}
    },
    [Symbol(signal)]: AbortSignal { aborted: false },
    [Symbol(abortController)]: AbortController { signal: AbortSignal { aborted: false } },
    [Symbol(headers)]: _HeadersList {
      cookies: null,
      [Symbol(headers map)]: [Map],
      [Symbol(headers map sorted)]: [Array]
    },
    [Symbol(internal request)]: {
      cookies: [RequestCookies],
      geo: {},
      ip: undefined,
      nextUrl: [NextURL],
      url: 'http://localhost:3000/api/auth/sign-up/email'
    }
  },
  body: {
    email: 'jmy52917@kisoq.com',
    password: 'Test1234',
    name: 'Alejandro Wurts',
    image: '/notion-avatars/avatar-07.svg',
    callbackURL: '/chat',
    orgName: 'Kiosky'
  },
  query: {}
}
////////////////////////////
 POST /api/auth/sign-up/email 200 in 2551ms
////////////////////////////
after hook path /verify-email
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:8787',
      'http://localhost:3000/api/auth',
      'http://localhost:3000'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: { session: [Object], user: [Object] },
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: [APIError [BetterCallAPIError]: API Error: FOUND ] {
      status: 'FOUND',
      headers: [_HeadersList],
      body: [Object],
      [cause]: undefined
    }
  },
  _flag: 'router',
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/verify-email',
  method: 'GET',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(20) {
      'accept' => [Object],
      'accept-encoding' => [Object],
      'accept-language' => [Object],
      'connection' => [Object],
      'cookie' => [Object],
      'host' => [Object],
      'sec-ch-ua' => [Object],
      'sec-ch-ua-mobile' => [Object],
      'sec-ch-ua-platform' => [Object],
      'sec-fetch-dest' => [Object],
      'sec-fetch-mode' => [Object],
      'sec-fetch-site' => [Object],
      'sec-fetch-user' => [Object],
      'sec-gpc' => [Object],
      'upgrade-insecure-requests' => [Object],
      'user-agent' => [Object],
      'x-forwarded-for' => [Object],
      'x-forwarded-host' => [Object],
      'x-forwarded-port' => [Object],
      'x-forwarded-proto' => [Object]
    },
    [Symbol(headers map sorted)]: [
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array]
    ]
  },
  params: undefined,
  request: NextRequest [Request] {
    [Symbol(realm)]: { settingsObject: [Object] },
    [Symbol(state)]: {
      method: 'GET',
      localURLsOnly: false,
      unsafeRequest: false,
      body: null,
      client: [Object],
      reservedClient: null,
      replacesClientId: '',
      window: 'client',
      keepalive: false,
      serviceWorkers: 'all',
      initiator: '',
      destination: '',
      priority: null,
      origin: 'client',
      policyContainer: 'client',
      referrer: 'client',
      referrerPolicy: '',
      mode: 'cors',
      useCORSPreflightFlag: false,
      credentials: 'same-origin',
      useCredentials: false,
      cache: 'default',
      redirect: 'follow',
      integrity: '',
      cryptoGraphicsNonceMetadata: '',
      parserMetadata: '',
      reloadNavigation: false,
      historyNavigation: false,
      userActivation: false,
      taintedOrigin: false,
      redirectCount: 0,
      responseTainting: 'basic',
      preventNoCacheCacheControlHeaderModification: false,
      done: false,
      timingAllowFailed: false,
      headersList: [_HeadersList],
      urlList: [Array],
      url: URL {}
    },
    [Symbol(signal)]: AbortSignal { aborted: false },
    [Symbol(abortController)]: AbortController { signal: AbortSignal { aborted: false } },
    [Symbol(headers)]: _HeadersList {
      cookies: null,
      [Symbol(headers map)]: [Map],
      [Symbol(headers map sorted)]: [Array]
    },
    [Symbol(internal request)]: {
      cookies: [RequestCookies],
      geo: {},
      ip: undefined,
      nextUrl: [NextURL],
      url: 'http://localhost:3000/api/auth/verify-email?token=eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImpteTUyOTE3QGtpc29xLmNvbSIsImlhdCI6MTc0MDgzNjg2NCwiZXhwIjoxNzQwODQwNDY0fQ.PUXNt2MGsqkOpGzhMgKswqG13JSaNeo77TPe3XFpLi4&callbackURL=/chat'
    }
  },
  body: undefined,
  query: {
    token: 'eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImpteTUyOTE3QGtpc29xLmNvbSIsImlhdCI6MTc0MDgzNjg2NCwiZXhwIjoxNzQwODQwNDY0fQ.PUXNt2MGsqkOpGzhMgKswqG13JSaNeo77TPe3XFpLi4',
    callbackURL: '/chat'
  }
}
////////////////////////////
 GET /api/auth/verify-email?token=eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImpteTUyOTE3QGtpc29xLmNvbSIsImlhdCI6MTc0MDgzNjg2NCwiZXhwIjoxNzQwODQwNDY0fQ.PUXNt2MGsqkOpGzhMgKswqG13JSaNeo77TPe3XFpLi4&callbackURL=/chat 302 in 73ms
 â—‹ Compiling /chat ...
 âœ“ Compiled /chat in 3.5s (2659 modules)
////////////////////////////
after hook path /get-session
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:3000',
      'http://localhost:8787'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: { session: [Object], user: [Object] }
  },
  _flag: undefined,
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/get-session',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  body: undefined,
  query: undefined
}
////////////////////////////
////////////////////////////
after hook path /get-session
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:3000',
      'http://localhost:8787'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: { session: [Object], user: [Object] }
  },
  _flag: undefined,
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/get-session',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  body: undefined,
  query: undefined
}
////////////////////////////
no active organization, setting it
orgSession undefined
no orgSession, throwing error
////////////////////////////
after hook path /organization/set-active
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:3000',
      'http://localhost:8787'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: null
  },
  _flag: undefined,
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/organization/set-active',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  body: { organizationId: undefined },
  query: undefined
}
////////////////////////////
 GET /chat 200 in 4125ms
////////////////////////////
after hook path /get-session
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:8787',
      'http://localhost:3000/api/auth',
      'http://localhost:3000'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: _Response [Response] {
      [Symbol(realm)]: [Object],
      [Symbol(state)]: [Object],
      [Symbol(headers)]: [_HeadersList]
    }
  },
  _flag: 'router',
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/get-session',
  method: 'GET',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(11) {
      'accept' => [Object],
      'accept-encoding' => [Object],
      'accept-language' => [Object],
      'connection' => [Object],
      'host' => [Object],
      'sec-fetch-mode' => [Object],
      'user-agent' => [Object],
      'x-forwarded-for' => [Object],
      'x-forwarded-host' => [Object],
      'x-forwarded-port' => [Object],
      'x-forwarded-proto' => [Object]
    },
    [Symbol(headers map sorted)]: [
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array]
    ]
  },
  params: undefined,
  request: NextRequest [Request] {
    [Symbol(realm)]: { settingsObject: [Object] },
    [Symbol(state)]: {
      method: 'GET',
      localURLsOnly: false,
      unsafeRequest: false,
      body: null,
      client: [Object],
      reservedClient: null,
      replacesClientId: '',
      window: 'client',
      keepalive: false,
      serviceWorkers: 'all',
      initiator: '',
      destination: '',
      priority: null,
      origin: 'client',
      policyContainer: 'client',
      referrer: 'client',
      referrerPolicy: '',
      mode: 'cors',
      useCORSPreflightFlag: false,
      credentials: 'same-origin',
      useCredentials: false,
      cache: 'default',
      redirect: 'follow',
      integrity: '',
      cryptoGraphicsNonceMetadata: '',
      parserMetadata: '',
      reloadNavigation: false,
      historyNavigation: false,
      userActivation: false,
      taintedOrigin: false,
      redirectCount: 0,
      responseTainting: 'basic',
      preventNoCacheCacheControlHeaderModification: false,
      done: false,
      timingAllowFailed: false,
      headersList: [_HeadersList],
      urlList: [Array],
      url: URL {}
    },
    [Symbol(signal)]: AbortSignal { aborted: false },
    [Symbol(abortController)]: AbortController { signal: AbortSignal { aborted: false } },
    [Symbol(headers)]: _HeadersList {
      cookies: null,
      [Symbol(headers map)]: [Map],
      [Symbol(headers map sorted)]: [Array]
    },
    [Symbol(internal request)]: {
      cookies: [RequestCookies],
      geo: {},
      ip: undefined,
      nextUrl: [NextURL],
      url: 'http://localhost:3000/api/auth/get-session'
    }
  },
  body: undefined,
  query: {}
}
////////////////////////////
////////////////////////////
after hook path /organization/get-full-organization
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:8787',
      'http://localhost:3000/api/auth',
      'http://localhost:3000'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: [APIError [BetterCallAPIError]: API Error: UNAUTHORIZED ] {
      status: 'UNAUTHORIZED',
      headers: [_HeadersList],
      body: [Object],
      [cause]: undefined
    }
  },
  _flag: 'router',
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/organization/get-full-organization',
  method: 'GET',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(11) {
      'accept' => [Object],
      'accept-encoding' => [Object],
      'accept-language' => [Object],
      'connection' => [Object],
      'host' => [Object],
      'sec-fetch-mode' => [Object],
      'user-agent' => [Object],
      'x-forwarded-for' => [Object],
      'x-forwarded-host' => [Object],
      'x-forwarded-port' => [Object],
      'x-forwarded-proto' => [Object]
    },
    [Symbol(headers map sorted)]: [
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array], [Array],
      [Array]
    ]
  },
  params: undefined,
  request: NextRequest [Request] {
    [Symbol(realm)]: { settingsObject: [Object] },
    [Symbol(state)]: {
      method: 'GET',
      localURLsOnly: false,
      unsafeRequest: false,
      body: null,
      client: [Object],
      reservedClient: null,
      replacesClientId: '',
      window: 'client',
      keepalive: false,
      serviceWorkers: 'all',
      initiator: '',
      destination: '',
      priority: null,
      origin: 'client',
      policyContainer: 'client',
      referrer: 'client',
      referrerPolicy: '',
      mode: 'cors',
      useCORSPreflightFlag: false,
      credentials: 'same-origin',
      useCredentials: false,
      cache: 'default',
      redirect: 'follow',
      integrity: '',
      cryptoGraphicsNonceMetadata: '',
      parserMetadata: '',
      reloadNavigation: false,
      historyNavigation: false,
      userActivation: false,
      taintedOrigin: false,
      redirectCount: 0,
      responseTainting: 'basic',
      preventNoCacheCacheControlHeaderModification: false,
      done: false,
      timingAllowFailed: false,
      headersList: [_HeadersList],
      urlList: [Array],
      url: URL {}
    },
    [Symbol(signal)]: AbortSignal { aborted: false },
    [Symbol(abortController)]: AbortController { signal: AbortSignal { aborted: false } },
    [Symbol(headers)]: _HeadersList {
      cookies: null,
      [Symbol(headers map)]: [Map],
      [Symbol(headers map sorted)]: [Array]
    },
    [Symbol(internal request)]: {
      cookies: [RequestCookies],
      geo: {},
      ip: undefined,
      nextUrl: [NextURL],
      url: 'http://localhost:3000/api/auth/organization/get-full-organization'
    }
  },
  body: undefined,
  query: {}
}
////////////////////////////
 GET /api/auth/get-session 200 in 122ms
 GET /api/auth/organization/get-full-organization 401 in 117ms
////////////////////////////
after hook path /get-session
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:8787',
      'http://localhost:3000/api/auth',
      'http://localhost:3000'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: _Response [Response] {
      [Symbol(realm)]: [Object],
      [Symbol(state)]: [Object],
      [Symbol(headers)]: [_HeadersList]
    }
  },
  _flag: 'router',
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/get-session',
  method: 'GET',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(19) {
      'accept' => [Object],
      'accept-encoding' => [Object],
      'accept-language' => [Object],
      'connection' => [Object],
      'cookie' => [Object],
      'host' => [Object],
      'referer' => [Object],
      'sec-ch-ua' => [Object],
      'sec-ch-ua-mobile' => [Object],
      'sec-ch-ua-platform' => [Object],
      'sec-fetch-dest' => [Object],
      'sec-fetch-mode' => [Object],
      'sec-fetch-site' => [Object],
      'sec-gpc' => [Object],
      'user-agent' => [Object],
      'x-forwarded-for' => [Object],
      'x-forwarded-host' => [Object],
      'x-forwarded-port' => [Object],
      'x-forwarded-proto' => [Object]
    },
    [Symbol(headers map sorted)]: [
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array]
    ]
  },
  params: undefined,
  request: NextRequest [Request] {
    [Symbol(realm)]: { settingsObject: [Object] },
    [Symbol(state)]: {
      method: 'GET',
      localURLsOnly: false,
      unsafeRequest: false,
      body: null,
      client: [Object],
      reservedClient: null,
      replacesClientId: '',
      window: 'client',
      keepalive: false,
      serviceWorkers: 'all',
      initiator: '',
      destination: '',
      priority: null,
      origin: 'client',
      policyContainer: 'client',
      referrer: 'client',
      referrerPolicy: '',
      mode: 'cors',
      useCORSPreflightFlag: false,
      credentials: 'same-origin',
      useCredentials: false,
      cache: 'default',
      redirect: 'follow',
      integrity: '',
      cryptoGraphicsNonceMetadata: '',
      parserMetadata: '',
      reloadNavigation: false,
      historyNavigation: false,
      userActivation: false,
      taintedOrigin: false,
      redirectCount: 0,
      responseTainting: 'basic',
      preventNoCacheCacheControlHeaderModification: false,
      done: false,
      timingAllowFailed: false,
      headersList: [_HeadersList],
      urlList: [Array],
      url: URL {}
    },
    [Symbol(signal)]: AbortSignal { aborted: false },
    [Symbol(abortController)]: AbortController { signal: AbortSignal { aborted: false } },
    [Symbol(headers)]: _HeadersList {
      cookies: null,
      [Symbol(headers map)]: [Map],
      [Symbol(headers map sorted)]: [Array]
    },
    [Symbol(internal request)]: {
      cookies: [RequestCookies],
      geo: {},
      ip: undefined,
      nextUrl: [NextURL],
      url: 'http://localhost:3000/api/auth/get-session'
    }
  },
  body: undefined,
  query: {}
}
////////////////////////////
 GET /api/auth/get-session 200 in 103ms
////////////////////////////
after hook path /organization/get-full-organization
after hook {
  setHeader: [Function: setHeader],
  setCookie: [Function: setCookie],
  getCookie: [Function: getCookie],
  getSignedCookie: [Function: getSignedCookie],
  setSignedCookie: [AsyncFunction: setSignedCookie],
  redirect: [Function: redirect],
  json: [Function: json],
  context: {
    appName: 'Better Auth',
    socialProviders: [],
    options: {
      database: [Function (anonymous)],
      emailVerification: [Object],
      emailAndPassword: [Object],
      advanced: [Object],
      trustedOrigins: [Array],
      plugins: [Array],
      databaseHooks: [Object],
      hooks: [Object],
      secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
      baseURL: 'http://localhost:3000',
      basePath: '/api/auth'
    },
    tables: {
      user: [Object],
      session: [Object],
      account: [Object],
      verification: [Object],
      organization: [Object],
      member: [Object],
      invitation: [Object]
    },
    trustedOrigins: [
      'http://localhost:3000',
      'http://localhost:8787',
      'http://localhost:3000/api/auth',
      'http://localhost:3000'
    ],
    baseURL: 'http://localhost:3000/api/auth',
    sessionConfig: { updateAge: 86400, expiresIn: 604800, freshAge: 86400 },
    secret: 'PSigi209HWEnKiQQo9NIFSfcLPeeLoeO',
    rateLimit: { enabled: false, window: 10, max: 100, storage: 'memory' },
    authCookies: {
      sessionToken: [Object],
      sessionData: [Object],
      dontRememberToken: [Object]
    },
    logger: {
      info: [Function (anonymous)],
      success: [Function (anonymous)],
      warn: [Function (anonymous)],
      error: [Function (anonymous)],
      debug: [Function (anonymous)]
    },
    generateId: [Function: generateIdFunc],
    session: null,
    secondaryStorage: undefined,
    password: {
      hash: [AsyncFunction: hashPassword],
      verify: [AsyncFunction: verifyPassword],
      config: [Object],
      checkPassword: [AsyncFunction: checkPassword]
    },
    setNewSession: [Function: setNewSession],
    newSession: null,
    adapter: {
      id: 'drizzle',
      create: [AsyncFunction: create],
      findOne: [AsyncFunction: findOne],
      findMany: [AsyncFunction: findMany],
      update: [AsyncFunction: update],
      updateMany: [AsyncFunction: updateMany],
      delete: [AsyncFunction: delete],
      deleteMany: [AsyncFunction: deleteMany],
      options: [Object]
    },
    internalAdapter: {
      createOAuthUser: [AsyncFunction: createOAuthUser],
      createUser: [AsyncFunction: createUser],
      createAccount: [AsyncFunction: createAccount],
      listSessions: [AsyncFunction: listSessions],
      listUsers: [AsyncFunction: listUsers],
      deleteUser: [AsyncFunction: deleteUser],
      createSession: [AsyncFunction: createSession],
      findSession: [AsyncFunction: findSession],
      findSessions: [AsyncFunction: findSessions],
      updateSession: [AsyncFunction: updateSession],
      deleteSession: [AsyncFunction: deleteSession],
      deleteAccounts: [AsyncFunction: deleteAccounts],
      deleteAccount: [AsyncFunction: deleteAccount],
      deleteSessions: [AsyncFunction: deleteSessions],
      findOAuthUser: [AsyncFunction: findOAuthUser],
      findUserByEmail: [AsyncFunction: findUserByEmail],
      findUserById: [AsyncFunction: findUserById],
      linkAccount: [AsyncFunction: linkAccount],
      updateUser: [AsyncFunction: updateUser],
      updateUserByEmail: [AsyncFunction: updateUserByEmail],
      updatePassword: [AsyncFunction: updatePassword],
      findAccounts: [AsyncFunction: findAccounts],
      findAccount: [AsyncFunction: findAccount],
      findAccountByUserId: [AsyncFunction: findAccountByUserId],
      updateAccount: [AsyncFunction: updateAccount],
      createVerificationValue: [AsyncFunction: createVerificationValue],
      findVerificationValue: [AsyncFunction: findVerificationValue],
      deleteVerificationValue: [AsyncFunction: deleteVerificationValue],
      deleteVerificationByIdentifier: [AsyncFunction: deleteVerificationByIdentifier],
      updateVerificationValue: [AsyncFunction: updateVerificationValue]
    },
    createAuthCookie: [Function: createCookie],
    returned: _Response [Response] {
      [Symbol(realm)]: [Object],
      [Symbol(state)]: [Object],
      [Symbol(headers)]: [_HeadersList]
    }
  },
  _flag: 'router',
  responseHeader: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(0) {},
    [Symbol(headers map sorted)]: null
  },
  path: '/organization/get-full-organization',
  method: 'GET',
  headers: _HeadersList {
    cookies: null,
    [Symbol(headers map)]: Map(19) {
      'accept' => [Object],
      'accept-encoding' => [Object],
      'accept-language' => [Object],
      'connection' => [Object],
      'cookie' => [Object],
      'host' => [Object],
      'referer' => [Object],
      'sec-ch-ua' => [Object],
      'sec-ch-ua-mobile' => [Object],
      'sec-ch-ua-platform' => [Object],
      'sec-fetch-dest' => [Object],
      'sec-fetch-mode' => [Object],
      'sec-fetch-site' => [Object],
      'sec-gpc' => [Object],
      'user-agent' => [Object],
      'x-forwarded-for' => [Object],
      'x-forwarded-host' => [Object],
      'x-forwarded-port' => [Object],
      'x-forwarded-proto' => [Object]
    },
    [Symbol(headers map sorted)]: [
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array], [Array], [Array],
      [Array]
    ]
  },
  params: undefined,
  request: NextRequest [Request] {
    [Symbol(realm)]: { settingsObject: [Object] },
    [Symbol(state)]: {
      method: 'GET',
      localURLsOnly: false,
      unsafeRequest: false,
      body: null,
      client: [Object],
      reservedClient: null,
      replacesClientId: '',
      window: 'client',
      keepalive: false,
      serviceWorkers: 'all',
      initiator: '',
      destination: '',
      priority: null,
      origin: 'client',
      policyContainer: 'client',
      referrer: 'client',
      referrerPolicy: '',
      mode: 'cors',
      useCORSPreflightFlag: false,
      credentials: 'same-origin',
      useCredentials: false,
      cache: 'default',
      redirect: 'follow',
      integrity: '',
      cryptoGraphicsNonceMetadata: '',
      parserMetadata: '',
      reloadNavigation: false,
      historyNavigation: false,
      userActivation: false,
      taintedOrigin: false,
      redirectCount: 0,
      responseTainting: 'basic',
      preventNoCacheCacheControlHeaderModification: false,
      done: false,
      timingAllowFailed: false,
      headersList: [_HeadersList],
      urlList: [Array],
      url: URL {}
    },
    [Symbol(signal)]: AbortSignal { aborted: false },
    [Symbol(abortController)]: AbortController { signal: AbortSignal { aborted: false } },
    [Symbol(headers)]: _HeadersList {
      cookies: null,
      [Symbol(headers map)]: [Map],
      [Symbol(headers map sorted)]: [Array]
    },
    [Symbol(internal request)]: {
      cookies: [RequestCookies],
      geo: {},
      ip: undefined,
      nextUrl: [NextURL],
      url: 'http://localhost:3000/api/auth/organization/get-full-organization'
    }
  },
  body: undefined,
  query: {}
}
////////////////////////////
 GET /api/auth/organization/get-full-organization 200 in 113ms
[?25h
